name: Deploy to pop-os-1

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development
      use_claude_max_plan:
        description: 'Claude Authentication Mode'
        required: true
        default: 'max-plan'
        type: choice
        options:
          - 'max-plan'
          - 'api-key'

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  deploy:
    runs-on: [self-hosted, pop-os-1]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up environment variables
      run: |
        echo "Setting up deployment environment..."
        echo "DEPLOYMENT_ENV=${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_ENV
        echo "DEPLOYMENT_TIME=$(date -u +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
        echo "GIT_SHA=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
        echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

    - name: Verify system requirements
      run: |
        echo "🔍 Checking system requirements..."
        
        # Check Docker
        if ! command -v docker &> /dev/null; then
          echo "❌ Docker is not installed"
          exit 1
        fi
        echo "✅ Docker version: $(docker --version)"
        
        # Check Docker Compose
        if ! command -v docker compose &> /dev/null; then
          echo "❌ Docker Compose is not installed"
          exit 1
        fi
        echo "✅ Docker Compose version: $(docker compose --version)"
        
        # Check available disk space (require at least 2GB)
        AVAILABLE_SPACE=$(df / | awk 'NR==2 {print $4}')
        REQUIRED_SPACE=2097152  # 2GB in KB
        if [ "$AVAILABLE_SPACE" -lt "$REQUIRED_SPACE" ]; then
          echo "❌ Insufficient disk space. Available: ${AVAILABLE_SPACE}KB, Required: ${REQUIRED_SPACE}KB"
          exit 1
        fi
        echo "✅ Sufficient disk space available: ${AVAILABLE_SPACE}KB"

    - name: Create deployment directory
      run: |
        echo "📁 Setting up deployment directory..."
        # Use home directory instead of /opt to avoid sudo requirements
        DEPLOY_DIR="$HOME/claude-workflow-manager-deploy"
        mkdir -p $DEPLOY_DIR
        echo "DEPLOY_DIR=$DEPLOY_DIR" >> $GITHUB_ENV
        echo "✅ Deployment directory created at $DEPLOY_DIR"

    - name: Stop existing services and clean up
      run: |
        echo "🛑 Stopping existing services..."
        cd $DEPLOY_DIR || cd .
        
        # Stop containers if they exist
        if [ -d "claude-workflow-manager" ]; then
          cd claude-workflow-manager
          if [ -f docker-compose.yml ]; then
            docker compose down --remove-orphans || true
          fi
          cd ..
          
          # Remove old deployment
          echo "🗑️ Removing old deployment..."
          rm -rf claude-workflow-manager || true
        fi
        
        # Clean up unused Docker resources
        docker system prune -f || true

    - name: Deploy new version
      run: |
        echo "🚀 Deploying new version..."
        cd $DEPLOY_DIR
        
        # Copy the claude-workflow-manager subdirectory from the repo
        cp -r $GITHUB_WORKSPACE/claude-workflow-manager .

    - name: Set up environment configuration
      run: |
        echo "⚙️ Setting up environment configuration..."
        cd $DEPLOY_DIR/claude-workflow-manager
        
        # Get the actual IP address of this machine
        HOST_IP_ADDRESS=$(hostname -I | awk '{print $1}')
        if [ -z "$HOST_IP_ADDRESS" ]; then
          HOST_IP_ADDRESS="pop-os-1"  # Fallback to hostname
        fi
        
        # Use GitHub secret if set, otherwise use detected IP
        if [ -n "${{ secrets.HOST_IP }}" ]; then
          FINAL_HOST_IP="${{ secrets.HOST_IP }}"
        else
          FINAL_HOST_IP="$HOST_IP_ADDRESS"
        fi
        
        echo "🌐 Using HOST_IP: $FINAL_HOST_IP"
        
        # Determine Claude mode
        CLAUDE_MODE_INPUT="${{ github.event.inputs.use_claude_max_plan || 'max-plan' }}"
        if [ "$CLAUDE_MODE_INPUT" = "max-plan" ]; then
          CLAUDE_MODE="true"
          echo "🤖 Claude Mode: Max Plan (authenticated via claude /login)"
        else
          CLAUDE_MODE="false"
          echo "🔑 Claude Mode: API Key (using CLAUDE_API_KEY)"
        fi
        
        # Create .env file from GitHub secrets
        cat > .env << EOF
        # MongoDB Configuration
        MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_USERNAME }}
        MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_PASSWORD }}

        # Claude API Configuration (conditional based on mode)
        # In max-plan mode, leave API key empty so Claude CLI uses credential files
        # In API key mode, use the provided API key
        CLAUDE_API_KEY=$(if [ "$CLAUDE_MODE" = "true" ]; then echo ""; else echo "${{ secrets.CLAUDE_API_KEY }}"; fi)
        USE_CLAUDE_MAX_PLAN=$CLAUDE_MODE

        # Host Configuration (auto-detected IP address)
        HOST_IP=$FINAL_HOST_IP

        # Optional: Custom folders
        CLAUDE_PROMPTS_FOLDER=.clode/claude_prompts
        CLAUDE_AGENTS_FOLDER=.claude/agents

        # Deployment metadata
        DEPLOYMENT_ENV=$DEPLOYMENT_ENV
        DEPLOYMENT_TIME=$DEPLOYMENT_TIME
        GIT_SHA=$GIT_SHA
        BRANCH_NAME=$BRANCH_NAME
        EOF
        
        echo "✅ Environment file created with HOST_IP=$FINAL_HOST_IP"
        echo "🤖 Claude mode set to: $CLAUDE_MODE"

    - name: Build and start services
      run: |
        echo "🔨 Building and starting services..."
        cd $DEPLOY_DIR/claude-workflow-manager
        
        # Always build fresh - no caching to ensure latest code
        echo "🔄 Building all services fresh (no cache) to ensure latest code..."
        docker system prune -f --volumes 2>/dev/null || true
        
        # Use the fast build script if available, otherwise use optimized docker-compose
        if [ -f "fast-build.sh" ]; then
          echo "📦 Using fast build script with no cache..."
          chmod +x fast-build.sh
          # Always force fresh builds
          FORCE_FRONTEND_REBUILD=true USE_PREBUILT=true ./fast-build.sh || USE_PREBUILT=true ./fast-build.sh
        else
          echo "🏗️ Using Docker Compose with fresh builds..."
          # Build all containers fresh - no cache at all
          docker compose build --no-cache --parallel
          
          # Start services
          docker compose up -d
        fi
        
        echo "✅ Services started successfully"

    - name: Wait for services to be healthy
      timeout-minutes: 5
      run: |
        echo "🏥 Waiting for services to be healthy..."
        cd $DEPLOY_DIR/claude-workflow-manager
        
        # Wait for backend to be ready
        echo "Waiting for backend service..."
        for i in {1..30}; do
          if curl -f http://localhost:8005/ &>/dev/null; then
            echo "✅ Backend service is healthy"
            break
          fi
          echo "Attempt $i/30: Backend not ready yet..."
          sleep 10
        done
        
        # Wait for frontend to be ready
        echo "Waiting for frontend service..."
        for i in {1..30}; do
          if curl -f http://localhost:3005 &>/dev/null; then
            echo "✅ Frontend service is healthy"
            break
          fi
          echo "Attempt $i/30: Frontend not ready yet..."
          sleep 10
        done

    - name: Verify deployment
      run: |
        echo "✅ Deployment verification complete"
        echo "🎉 Claude Workflow Manager services are running"

    - name: Display service status
      run: |
        echo "📊 Service Status:"
        cd $DEPLOY_DIR/claude-workflow-manager
        docker compose ps
        
        echo ""
        echo "🔗 Service URLs:"
        # Get the HOST_IP from the .env file
        HOST_IP_FROM_ENV=$(grep "HOST_IP=" .env | cut -d'=' -f2)
        echo "Frontend: http://${HOST_IP_FROM_ENV}:3005"
        echo "Backend API: http://${HOST_IP_FROM_ENV}:8005"
        echo "MongoDB: ${HOST_IP_FROM_ENV}:27018"
        echo "Redis: ${HOST_IP_FROM_ENV}:6379"

    - name: Send deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment completed successfully!"
          echo "🎉 Claude Workflow Manager is now running on self-hosted runner"
          echo "📅 Deployed: $DEPLOYMENT_TIME"
          echo "🌿 Branch: $BRANCH_NAME"
          echo "📝 Commit: $GIT_SHA"
          CLAUDE_DISPLAY_MODE="${{ github.event.inputs.use_claude_max_plan || 'max-plan' }}"
          if [ "$CLAUDE_DISPLAY_MODE" = "max-plan" ]; then
            echo "🤖 Claude Mode: Max Plan"
          else
            echo "🔑 Claude Mode: API Key"
          fi
        else
          echo "❌ Deployment failed!"
          echo "📅 Failed at: $(date -u)"
          echo "🌿 Branch: $BRANCH_NAME"
          echo "📝 Commit: $GIT_SHA"
          
          # Show recent logs for debugging
          echo "🔍 Recent logs:"
          cd $DEPLOY_DIR/claude-workflow-manager || cd .
          docker compose logs --tail=50 || true
        fi

    - name: Cleanup on failure
      if: failure()
      run: |
        echo "🧹 Cleaning up failed deployment..."
        cd $DEPLOY_DIR || cd .
        
        # Stop and remove containers if they exist
        if [ -d "claude-workflow-manager" ]; then
          cd claude-workflow-manager
          docker compose down --remove-orphans || true
          cd ..
        fi
        
        echo "❌ Deployment failed - manual intervention may be required"