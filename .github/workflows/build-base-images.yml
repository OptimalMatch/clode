name: Build Base Docker Images

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all base images'
        required: false
        default: false
        type: boolean
  
  # Trigger on changes to Dockerfiles or dependencies
  push:
    paths:
      - 'claude-workflow-manager/backend/Dockerfile*'
      - 'claude-workflow-manager/frontend/Dockerfile*'
      - 'claude-workflow-manager/backend/requirements.txt'
      - 'claude-workflow-manager/frontend/package*.json'
      - 'voice-backend/Dockerfile*'
      - 'voice-backend/requirements.txt'
      - 'voice-mcp-server/Dockerfile*'
      - 'voice-mcp-server/requirements.txt'
      - '.github/workflows/build-base-images.yml'
    branches:
      - main
      - develop
      - feature/7-add-voice

  # Weekly rebuild to get latest security updates
  schedule:
    - cron: '0 2 * * 0'  # Every Sunday at 2 AM UTC

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/claude-workflow

jobs:
  build-base-images:
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service:
          - name: "backend-base"
            dockerfile: "claude-workflow-manager/backend/Dockerfile.base"
            context: "claude-workflow-manager/backend"
          - name: "terminal-base"
            dockerfile: "claude-workflow-manager/backend/Dockerfile.terminal.base"
            context: "claude-workflow-manager/backend"
          - name: "frontend-base"
            dockerfile: "claude-workflow-manager/frontend/Dockerfile.base"
            context: "claude-workflow-manager/frontend"
          - name: "voice-backend"
            dockerfile: "voice-backend/Dockerfile"
            context: "voice-backend"
          - name: "voice-mcp-server"
            dockerfile: "voice-mcp-server/Dockerfile"
            context: "voice-mcp-server"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{date 'YYYYMMDD-HHmmss'}}

    - name: Check if base image needs rebuild
      id: check
      run: |
        FORCE_REBUILD="${{ github.event.inputs.force_rebuild }}"
        IMAGE_NAME="${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}:latest"
        
        if [ "$FORCE_REBUILD" = "true" ]; then
          echo "üîÑ Force rebuild requested"
          echo "needs_build=true" >> $GITHUB_OUTPUT
        elif docker manifest inspect "$IMAGE_NAME" > /dev/null 2>&1; then
          echo "üì¶ Base image exists, checking if dependencies changed..."
          
          # Check if Dockerfile or dependencies changed in last commit
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          if echo "$CHANGED_FILES" | grep -E "(Dockerfile|requirements\.txt|package.*\.json)" > /dev/null; then
            echo "üìù Dependencies changed, rebuild needed"
            echo "needs_build=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No dependency changes, skipping build"
            echo "needs_build=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "üÜï Base image doesn't exist, build needed"
          echo "needs_build=true" >> $GITHUB_OUTPUT
        fi

    - name: Build and push base image
      if: steps.check.outputs.needs_build == 'true'
      id: build
      uses: docker/build-push-action@v5
      continue-on-error: true
      with:
        context: ${{ matrix.service.context }}
        file: ${{ matrix.service.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Verify build success
      if: steps.check.outputs.needs_build == 'true'
      run: |
        if [ "${{ steps.build.outcome }}" = "failure" ]; then
          echo "‚ö†Ô∏è Build step failed, checking if image was pushed..."
          
          # Check if the main branch tag exists (image was pushed successfully)
          IMAGE_NAME="${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}"
          MAIN_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          
          if docker manifest inspect "$MAIN_TAG" > /dev/null 2>&1; then
            echo "‚úÖ Image was pushed successfully despite cache error"
            echo "‚ÑπÔ∏è  This is likely a transient GitHub Actions cache service issue"
            exit 0
          else
            echo "‚ùå Build genuinely failed - image not found in registry"
            exit 1
          fi
        else
          echo "‚úÖ Build completed successfully"
        fi

    - name: Image build summary
      if: always()
      run: |
        if [ "${{ steps.check.outputs.needs_build }}" = "true" ]; then
          echo "‚úÖ Built and pushed: ${{ env.IMAGE_PREFIX }}-${{ matrix.service.name }}"
          echo "üè∑Ô∏è Tags:"
          echo "${{ steps.meta.outputs.tags }}" | sed 's/^/  - /'
          
          if [ "${{ steps.build.outcome }}" = "failure" ]; then
            echo ""
            echo "‚ö†Ô∏è Note: GitHub Actions cache had issues, but build succeeded"
          fi
        else
          echo "‚è≠Ô∏è Skipped: ${{ matrix.service.name }} (no changes)"
        fi

  cleanup-old-images:
    runs-on: self-hosted
    needs: build-base-images
    if: always()
    steps:
    - name: Clean up old base images
      run: |
        echo "üßπ Cleaning up old base images..."
        
        # Keep last 5 versions of each base image
        for service in backend-base terminal-base frontend-base voice-backend voice-mcp-server; do
          echo "Cleaning $service images..."
          docker images --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" \
            | grep "claude-workflow-$service" \
            | tail -n +6 \
            | awk '{print $1}' \
            | xargs -r docker rmi || true
        done
        
        # Clean up build cache
        docker builder prune -f --filter until=168h  # Keep 1 week
        
        echo "‚úÖ Cleanup completed"
