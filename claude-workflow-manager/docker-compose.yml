# Production Docker Compose Configuration
# For development with hot reload, use: docker-compose -f docker-compose.dev.yml up

services:
  mongodb:
    image: mongo:7.0
    container_name: claude-workflow-mongo
    restart: always
    ports:
      - "27020:27017"
    cpus: 1.0
    mem_limit: 4g
    mem_reservation: 2g
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: claude_workflows
    volumes:
      - mongo_data:/data/db
    networks:
      - claude-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.base
    container_name: claude-workflow-backend
    # Note: No 'user: claude' here - the entrypoint script starts as root to run dockerd,
    # then switches to claude user for the application
    restart: always
    privileged: true  # Required for Docker-in-Docker
    ports:
      - "8005:8000"
    cpus: 4.0                # Cap to 4 CPU cores
    mem_limit: 2g            # Hard max memory
    mem_reservation: 1.5g    # Soft reservation
    environment:
      MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/claude_workflows?authSource=admin
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      ANTHROPIC_API_KEY: ${CLAUDE_API_KEY}
      REDIS_URL: redis://redis:6379
      CLAUDE_PROMPTS_FOLDER: ${CLAUDE_PROMPTS_FOLDER:-.clode/claude_prompts}
      CLAUDE_AGENTS_FOLDER: ${CLAUDE_AGENTS_FOLDER:-.claude/agents}
      USE_CLAUDE_MAX_PLAN: ${USE_CLAUDE_MAX_PLAN:-false}
      PROJECT_ROOT_DIR: ${PROJECT_ROOT_DIR:-/app/project}
      DOCKER_TLS_CERTDIR: /certs  # Docker-in-Docker TLS certificates
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./backend:/app/src  # Re-enabled for development
      - claude_profiles:/app/claude_profiles  # Isolated Claude profiles for multi-user
      - terminal_sessions:/app/terminal_sessions  # Isolated terminal sessions
      - ssh_generated_keys:/app/ssh_keys
      - ${PWD}/..:/app/project  # Mount the actual project directory (parent of claude-workflow-manager)
      - docker-certs-ca:/certs/ca  # Docker-in-Docker CA certificates
      - docker-certs-client:/certs/client  # Docker-in-Docker client certificates
    networks:
      - claude-network

  frontend:
    build:
      context: ./frontend
      args:
        REACT_APP_API_URL: http://${HOST_IP:-localhost}:8005
        REACT_APP_WS_URL: ws://${HOST_IP:-localhost}:8006
        REACT_APP_API_PORT: 8005
        REACT_APP_WS_PORT: 8006
    container_name: claude-workflow-frontend
    restart: always
    ports:
      - "3005:3000"
    cpus: 0.5
    mem_limit: 512m
    mem_reservation: 256m
    depends_on:
      - backend
    # volumes:
      # - ./frontend:/app
      # - /app/node_modules
    # Note: Volume mounts disabled for production deployment to avoid dev server WebSocket issues
    networks:
      - claude-network

  claude-terminal:
    build: 
      context: ./backend
      dockerfile: Dockerfile.terminal
    container_name: claude-workflow-terminal
    # Note: Container starts as root to fix Docker socket permissions,
    # then startup script switches to claude user
    restart: always
    # privileged: false - No longer needed (using Docker CLI only, not DinD)
    ports:
      - "8006:8006"  # Terminal WebSocket server
      - "8007:8007"  # Health check server
    cpus: 2.0
    mem_limit: 1g
    mem_reservation: 512m
    environment:
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      ANTHROPIC_API_KEY: ${CLAUDE_API_KEY}
      USE_CLAUDE_MAX_PLAN: ${USE_CLAUDE_MAX_PLAN:-false}
      TERMINAL_SERVER_PORT: 8006
      CLAUDE_PROFILES_DIR: /app/claude_profiles
      TERMINAL_SESSIONS_DIR: /app/terminal_sessions
      PROJECT_ROOT_DIR: ${PROJECT_ROOT_DIR:-/app/project}
    volumes:
      - claude_profiles:/app/claude_profiles  # Isolated Claude profiles
      - terminal_sessions:/app/terminal_sessions  # Session working directories
      - ~/.claude:/root/.claude  # Fallback to host Claude auth
      - ${PWD}/..:/app/project  # Mount the actual project directory (parent of claude-workflow-manager)
      - /var/run/docker.sock:/var/run/docker.sock  # Docker socket for docker exec access to backend
    networks:
      - claude-network
      - default  # Add default network for internet access
    dns:
      - 8.8.8.8  # Google DNS
      - 1.1.1.1  # Cloudflare DNS
    depends_on:
      - mongodb

  mcp-server:
    build:
      context: ./backend
      dockerfile: Dockerfile.mcp
    container_name: claude-workflow-mcp
    restart: always
    environment:
      BACKEND_URL: http://backend:8000
      MCP_TCP_MODE: "true"
      MCP_TCP_PORT: "8002"
    depends_on:
      - backend
    volumes:
      - ./backend:/app/src  # Development volume mount
    ports:
      - "8002:8002"  # Expose MCP server on host port 8002
    networks:
      - claude-network
    command: ["python", "/app/src/mcp_server.py"]

  redis:
    image: redis:7-alpine
    container_name: claude-workflow-redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - claude-network

volumes:
  mongo_data:
  ssh_known_hosts:
  ssh_generated_keys:
  claude_profiles:    # Named volume for isolated Claude authentication profiles
  terminal_sessions:  # Named volume for isolated terminal working directories
  docker-certs-ca:    # Docker-in-Docker CA certificates
  docker-certs-client: # Docker-in-Docker client certificates

networks:
  claude-network:
    driver: bridge