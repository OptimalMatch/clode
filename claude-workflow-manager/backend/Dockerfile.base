# Backend Base Image - Contains all OS packages and Python dependencies
# This image is built separately and cached for fast deployments
FROM ubuntu:22.04

# Set non-interactive mode to avoid prompts
ENV DEBIAN_FRONTEND=noninteractive

# Install all required packages in one optimized layer (Ubuntu repos are fast!)
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Core system
    ca-certificates \
    curl \
    wget \
    unzip \
    zip \
    sudo \
    gnupg \
    lsb-release \
    # Python stack
    python3 \
    python3-pip \
    python3-venv \
    # Development tools
    git \
    openssh-client \
    build-essential \
    # Docker dependencies
    apt-transport-https \
    software-properties-common \
    iptables \
    supervisor \
    fuse-overlayfs \
    # Common development tools often needed by projects
    # Install multiple Java versions for compatibility
    openjdk-8-jdk \
    openjdk-11-jdk \
    openjdk-17-jdk \
    openjdk-21-jdk \
    maven \
    make \
    cmake \
    vim \
    nano \
    && curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
    && ln -s /usr/bin/python3 /usr/bin/python

# Install Docker CE
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null \
    && apt-get update \
    && apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Docker Compose standalone
RUN curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose \
    && chmod +x /usr/local/bin/docker-compose

# Set Java 17 as default (most compatible with modern Spring Boot)
RUN update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java && \
    update-alternatives --set javac /usr/lib/jvm/java-17-openjdk-amd64/bin/javac
ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64

# Install Gradle 8.5
RUN curl -L https://services.gradle.org/distributions/gradle-8.5-bin.zip -o /tmp/gradle.zip && \
    unzip -q /tmp/gradle.zip -d /opt && \
    rm /tmp/gradle.zip && \
    ln -s /opt/gradle-8.5/bin/gradle /usr/local/bin/gradle

# Set environment variables
ENV GRADLE_HOME=/opt/gradle-8.5
ENV PATH="${GRADLE_HOME}/bin:${PATH}"

# Install Claude Code CLI globally
RUN npm config set registry https://registry.npmjs.org/ && \
    npm install -g @anthropic-ai/claude-code --timeout=60000 || \
    (echo "⚠️ Claude CLI installation failed, will retry at runtime" && exit 0)

# Create Python virtual environment and ensure proper PATH
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:/root/.local/bin:$PATH"

# Configure Docker daemon for DinD
# Note: Using 'vfs' storage driver instead of 'overlay2' because overlay2 
# doesn't work well in Docker-in-Docker without special kernel support
RUN mkdir -p /etc/docker && \
    echo '{\n  "storage-driver": "vfs",\n  "log-driver": "json-file",\n  "log-opts": {\n    "max-size": "10m",\n    "max-file": "3"\n  }\n}' > /etc/docker/daemon.json

# Create non-root user for better security
RUN useradd -m -s /bin/bash claude && \
    # Add passwordless sudo ONLY for package managers (doesn't interfere with Claude autonomous mode)
    echo "claude ALL=(ALL) NOPASSWD: /usr/bin/apt-get, /usr/bin/apt, /usr/bin/dpkg, /usr/bin/npm, /usr/bin/pip, /usr/bin/pip3" > /etc/sudoers.d/claude && \
    chmod 0440 /etc/sudoers.d/claude && \
    # Add claude user to docker group for Docker-in-Docker
    usermod -aG docker claude

# Create Docker startup script that runs dockerd as root, then switches to claude user
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# Fix permissions for project directory if it exists\n\
if [ -d "/app/project" ]; then\n\
    echo "🔧 Fixing permissions for /app/project..."\n\
    chown -R claude:claude /app/project 2>/dev/null || true\n\
    chmod -R u+rwX /app/project 2>/dev/null || true\n\
fi\n\
\n\
# Start Docker daemon in background as root (configuration from /etc/docker/daemon.json)\n\
echo "Starting Docker daemon..."\n\
dockerd &\n\
DOCKER_PID=$!\n\
\n\
# Wait for Docker to be ready\n\
timeout=30\n\
while [ $timeout -gt 0 ]; do\n\
    if docker version >/dev/null 2>&1; then\n\
        echo "Docker daemon is ready"\n\
        break\n\
    fi\n\
    timeout=$((timeout - 1))\n\
    sleep 1\n\
done\n\
\n\
if [ $timeout -eq 0 ]; then\n\
    echo "Docker daemon failed to start"\n\
    exit 1\n\
fi\n\
\n\
# Switch to claude user and execute the main command\n\
echo "Switching to claude user and starting application..."\n\
exec su -c "cd /app && exec $*" claude' > /usr/local/bin/docker-entrypoint.sh && \
    chmod +x /usr/local/bin/docker-entrypoint.sh

# Set up SSH configuration for claude user
RUN mkdir -p /home/claude/.ssh && \
    chmod 700 /home/claude/.ssh && \
    ssh-keyscan -H github.com >> /home/claude/.ssh/known_hosts && \
    ssh-keyscan -H gitlab.com >> /home/claude/.ssh/known_hosts && \
    ssh-keyscan -H bitbucket.org >> /home/claude/.ssh/known_hosts && \
    chmod 644 /home/claude/.ssh/known_hosts && \
    chown -R claude:claude /home/claude/.ssh

# Install Python dependencies (copy requirements.txt for this step)
WORKDIR /app
COPY requirements.txt .
RUN /opt/venv/bin/pip install --no-cache-dir -r requirements.txt

# Create necessary directories
RUN mkdir -p /app/src /app/project /home/claude/.claude /app/ssh_keys && \
    chown -R claude:claude /home/claude/.claude /app/ssh_keys

# Set Python path and ensure PATH includes venv
ENV PYTHONPATH="/app:/app/src:${PYTHONPATH}"
ENV PATH="/opt/venv/bin:/root/.local/bin:$PATH"

# Note: We DON'T switch to USER claude here because the entrypoint script
# needs to run as root to start dockerd, then it switches to claude user
WORKDIR /app
EXPOSE 8000

# Default command (will be overridden by deployment Dockerfile)
# The entrypoint runs as root, starts dockerd, then switches to claude user
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]
CMD ["/opt/venv/bin/uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
